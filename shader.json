{
	"vertex": "attribute vec2 a_position;\nvoid main() {\n\tgl_Position = vec4(a_position, 0, 1);\n}",
	"hardware_double": "#extension GL_ARB_gpu_shader_fp64 : enable\n#ifdef GL_ES\nprecision highp float;\n#endif\nuniform float uResolutionY;\nuniform float uAspectRatio;\nuniform float uScale;\nuniform double uTranslateX;\nuniform double uTranslateY;\nuniform int uMaxIterations;\nuniform vec3 uBaseColor;\nuniform vec3 uColorStrength;\nuniform bool uDrawGrid;\nconst float LINE_THICKNESS = 0.0025;\n// -- PARAMETER_CODE -- //\nconst float ESCAPE_THRESHOLD = 10000.0;\nvec3 hsl2rgb( in vec3 c ) {\n\tvec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\ndouble round( in double number ) { return sign(number)*floor(abs(number)+0.5); }\nvoid main() {\n\tdvec2 C = vec2(uTranslateX + ((double(gl_FragCoord.x) - ((uResolutionY * uAspectRatio) / 2.0) ) / uResolutionY) * uScale, uTranslateY - ((double(gl_FragCoord.y) - (uResolutionY / 2.0) ) / uResolutionY) * uScale);\n\tif( (abs(C.x - round(C.x)) < (uScale * LINE_THICKNESS) || abs(C.y - round(C.y)) < (uScale * LINE_THICKNESS )) && uDrawGrid ) {\n\t\tgl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n\t}else {\n\t\tdvec2 Z = dvec2(// -- INIT -- //);\n\t\tint iterations = 0;\n\t\tfor( int i = 0; i < 1000; ++i ) {\n\t\t\t// -- FRACTAL_CODE -- //\n\t\t\titerations = i + 1;\n\t\t\tif( Z.x*Z.x + Z.y*Z.y > ESCAPE_THRESHOLD || iterations >= uMaxIterations) { break; }\n\t\t}\n\n\t\tif( iterations >= uMaxIterations ) {\n\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t}else {\n\t\t\tfloat dI = (float(iterations) / float(uMaxIterations)); gl_FragColor = vec4(hsl2rgb( uColorStrength * dI + uBaseColor ), 1.0); \n\t\t}\n\t}\n}",
	"simulated_double": "",
	"float": "#ifdef GL_ES\nprecision highp float;\n#endif\nuniform float uResolutionY;\nuniform float uAspectRatio;\nuniform float uScale;\nuniform float uTranslateX;\nuniform float uTranslateY;\nuniform int uMaxIterations;\nuniform vec3 uBaseColor;\nuniform vec3 uColorStrength;\nuniform bool uDrawGrid;\nconst float LINE_THICKNESS = 0.0025;\n// -- PARAMETER_CODE -- //\nconst float ESCAPE_THRESHOLD = 10000.0;\nvec3 hsl2rgb( in vec3 c ) {\n\tvec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}float round( in float number ) { return sign(number)*floor(abs(number)+0.5); }\nvoid main() {\n\tvec2 C = vec2(uTranslateX + ((float(gl_FragCoord.x) - ((uResolutionY * uAspectRatio) / 2.0) ) / uResolutionY) * uScale, uTranslateY - ((float(gl_FragCoord.y) - (uResolutionY / 2.0) ) / uResolutionY) * uScale);\n\tif( (abs(C.x - round(C.x)) < (uScale * LINE_THICKNESS) || abs(C.y - round(C.y)) < (uScale * LINE_THICKNESS )) && uDrawGrid ) {\n\t\tgl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n\t}else {\n\t\tvec2 Z = vec2(// -- INIT -- //);\n\t\tint iterations = 0;\n\t\tfor( int i = 0; i < 1000; ++i ) {\n\t\t\t// -- FRACTAL_CODE -- //\n\t\t\titerations = i + 1;\n\t\t\tif( Z.x*Z.x + Z.y*Z.y > ESCAPE_THRESHOLD || iterations >= uMaxIterations) { break; }\n\t\t}\n\n\t\tif( iterations >= uMaxIterations ) {\n\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t}else {\n\t\t\tfloat dI = (float(iterations) / float(uMaxIterations)); gl_FragColor = vec4(hsl2rgb( uColorStrength * dI + uBaseColor ), 1.0); \n\t\t}\n\t}\n}",
	"fractals": {
		"Mandelbrot Set": {
			"init": "0.0, 0.0",
			"GLSL": "float _x = pow(Z.x*Z.x+Z.y*Z.y, uParameter_Power / 2.0) * cos(uParameter_Power * atan(Z.y, Z.x)) + C.x;\nZ.y = pow(Z.x*Z.x+Z.y*Z.y, uParameter_Power / 2.0) * sin(uParameter_Power * atan(Z.y, Z.x)) + C.y;\nZ.x = _x;",
			"parameters": {
				"Power": {
					"symbol": "d",
					"type": "float",
					"default": 2.0,
					"desc": "The power to raise Z to, allows the rendering of any multibrot set"
				}
			},
			"desc": "The mandelbrot set, representation of the function Z = Z^2 + C",
			"start_posRe": -0.3,
			"start_posIm": 0,
			"start_scale": 2.1
		},
		"Burning Ship": {
			"init": "0.0, 0.0",
			"GLSL": "float _x = Z.x*Z.x - Z.y*Z.y + C.x;\nZ.y = abs(2.0*Z.x*Z.y) + C.y;\nZ.x = _x;",
			"parameters": {},
			"desc": "The burning ship, representation of the function Z = Z^2 + C",
			"start_posRe": -0.3,
			"start_posIm": -0.55,
			"start_scale": 2.2
		},
		"Mandelbox": {
			"init": "0.0, 0.0",
			"GLSL": "if(Z.x > 1.0) { Z.x = 2.0 - Z.x; }else if(Z.x < -1.0) { Z.x = -2.0 - Z.x; } if(Z.y > 1.0) { Z.y = 2.0 - Z.y; }else if(Z.y < -1.0) { Z.y = -2.0 - Z.y; } float mag = sqrt( Z.x*Z.x + Z.y*Z.y ); if( mag < 0.5 ) { Z *= 4.0; }else if(mag < 1.0) { Z /= mag * mag; } Z.x = uParameter_K * Z.x + C.x; Z.y = uParameter_K * Z.y + C.y;",
			"parameters": {
				"K": {
					"symbol": "K",
					"type": "float",
					"default": 2.5,
					"desc": "No clue"
				}
			},
			"desc": "The burning ship, representation of the function Z = Z^2 + C"
		}
	}
}